resources:
  - name: global_state
    type: state

jobs:
  - name: trigger_tests
    type: runSh
    steps:
      - TASK:
          name: trigger_tests
          script:
            - echo "Triggering all downstream runSH test"

  ####################################################################
  # Configuration options for jobs running on default runtime (container)
  ####################################################################
  ## Job description:
  ## - single task
  - name: container_single_task
    type: runSh
    steps:
      - IN: trigger_tests
      - TASK:
          name: check_container_OS
          script:
            - echo "Checking OS of the container"
            - uname -a
            - cat /etc/*release
    on_success:
      script:
        - echo "Task successfully completed"
    on_failure:
      script:
        - echo "This should be executed if any step in TASK fails"
    always:
      script:
        - echo "This should always be executed, regardless of job status"

  ## Job description:
  ## - multiple tasks
  - name: container_multiple_tasks
    type: runSh
    steps:
      - IN: trigger_tests
      - TASK:
          name: check_container_OS
          script:
            - echo "Checking OS of the container"
            - uname -a
            - cat /etc/*release
      - TASK:
          name: check_images
          script:
            - echo "Checking available docker images"
            - sudo docker images
      - TASK:
          name: check_container_uptime
          script:
            - echo "Checking container uptime"
            - uptime
    on_success:
      script:
        - echo "Task successfully completed"
    on_failure:
      script:
        - echo "This should be executed if any step in TASK fails"
    always:
      script:
        - echo "This should always be executed, regardless of job status"

  ## Job description:
  ## - multiple tasks
  ## - shared task directory
  - name: container_share_task_state
    type: runSh
    steps:
      - IN: trigger_tests
      - TASK:
          name: write_to_file
          script:
            - echo "Writing data to a file in shared directory"
            - echo "CUSTOM_VALUE" > $SHARED_DIR/sharedFile.txt
      - TASK:
          name: override_file
          script:
            - echo "Reading data from file in shared directory"
            - echo $SHARED_DIR/sharedFile.txt
            - echo "Overriding file data"
            - echo "OVERRIDEN_VALUE" > $SHARED_DIR/sharedFile.txt
      - TASK:
          name: check_contents
          script:
            - echo "Checking shared file contents"
            - cat $SHARED_DIR/sharedFile.txt
    on_success:
      script:
        - echo "Task successfully completed"
    on_failure:
      script:
        - echo "This should be executed if any step in TASK fails"
    always:
      script:
        - echo "This should always be executed, regardless of job status"

  ## Job description:
  ## - single task
  ## - custom image to run the job
  - name: container_custom_image
    type: runSh
    steps:
      - IN: trigger_tests
      - TASK:
          name: custom_container_opts
          runtime:
            options:
              imageName: drydock/u14pytall
              imageTag: master
          script:
            - echo "Checking runtime values"
            - sudo docker info
            - sudo docker images
            - sudo docker ps -a
    on_success:
      script:
        - echo "Task successfully completed"
    on_failure:
      script:
        - echo "This should be executed if any step in TASK fails"
    always:
      script:
        - echo "This should always be executed, regardless of job status"

  ## Job description:
  ## - single task
  ## - custom image options to run the job
  - name: container_custom_opts
    type: runSh
    steps:
      - IN: trigger_tests
      - TASK:
          name: custom_container_opts
          runtime:
            options:
              env:
                - CONTAINER_ENV_1: foo
                - CONTAINER_ENV_2: bar
              imageName: drydock/u14pytall
              imageTag: master
              options: --dns=4.4.4.4 --dns=8.8.8.8
          script:
            - echo "Checking runtime values"
            - sudo docker info
            - sudo docker images
            - sudo docker ps -a
            - echo "Checking environment variables"
            - env
    on_success:
      script:
        - echo "Task successfully completed"
    on_failure:
      script:
        - echo "This should be executed if any step in TASK fails"
    always:
      script:
        - echo "This should always be executed, regardless of job status"

  ####################################################################
  # Configuration options for jobs running on host
  ####################################################################
  ## Job description:
  ## - single task
  - name: host_single_task
    type: runSh
    runtime:
      container: false
    steps:
      - IN: trigger_tests
      - TASK:
          name: check_host_OS
          script:
            - echo "Checking OS of the host"
            - uname -a
            - cat /etc/*release
    on_success:
      script:
        - echo "Task successfully completed"
    on_failure:
      script:
        - echo "This should be executed if any step in TASK fails"
    always:
      script:
        - echo "This should always be executed, regardless of job status"

  ## Job description:
  ## - multiple tasks
  - name: host_multiple_tasks
    type: runSh
    allowPublicAccess: true
    runtime:
      container: false
    steps:
      - IN: trigger_tests
      - TASK:
          name: check_host_OS
          script:
            - echo "Checking OS of the host"
            - uname -a
            - cat /etc/*release
      - TASK:
          name: check_images
          script:
            - echo "Checking available docker images"
            - sudo docker images
      - TASK:
          name: check_host_uptime
          script:
            - echo "Checking host uptime"
            - uptime
    on_success:
      script:
        - echo "Task successfully completed"
    on_failure:
      script:
        - echo "This should be executed if any step in TASK fails"
    always:
      script:
        - echo "This should always be executed, regardless of job status"

  ## Job description:
  ## - multiple tasks
  ## - shared task directory
  - name: host_share_task_state
    type: runSh
    runtime:
      container: false
    steps:
      - IN: trigger_tests
      - TASK:
          name: write_to_file
          script:
            - echo "Writing data to a file in shared directory"
            - echo "CUSTOM_VALUE" > $SHARED_DIR/sharedFile.txt
      - TASK:
          name: override_file
          script:
            - echo "Reading data from file in shared directory"
            - echo $SHARED_DIR/sharedFile.txt
            - echo "Overriding file data"
            - echo "OVERRIDEN_VALUE" > $SHARED_DIR/sharedFile.txt
      - TASK:
          name: check_contents
          script:
            - echo "Checking shared file contents"
            - cat $SHARED_DIR/sharedFile.txt
    on_success:
      script:
        - echo "Task successfully completed"
    on_failure:
      script:
        - echo "This should be executed if any step in TASK fails"
    always:
      script:
        - echo "This should always be executed, regardless of job status"

  ## Job description:
  ## - single task
  ## - custom image to run the job
  - name: host_custom_envs
    type: runSh
    runtime:
      container: false
    steps:
      - IN: trigger_tests
      - TASK:
          name: host_custom_envs
          runtime:
            options:
              env:
                - HOST_ENV_1: foo
                - HOST_ENV_2: bar
          script:
            - echo "Checking runtime values"
            - env | grep HOST
    on_success:
      script:
        - echo "Task successfully completed"
    on_failure:
      script:
        - echo "This should be executed if any step in TASK fails"
    always:
      script:
        - echo "This should always be executed, regardless of job status"

  ####################################################################
  # Configuration options for hybrid jobs i.e. jobs having tasks on both
  # container and the host
  ####################################################################
  ## Job description:
  ## - single task on both container and host, container being default
  - name: hybrid_default_container
    type: runSh
    steps:
      - IN: trigger_tests
      - TASK:
          name: check_container_OS
          script:
            - echo "Checking OS of the container"
            - uname -a
            - cat /etc/*release
      - TASK:
          name: check_host_OS
          runtime:
            container: false
          script:
            - echo "Checking OS of the host"
            - uname -a
            - cat /etc/*release
    on_success:
      script:
        - echo "Task successfully completed"
    on_failure:
      script:
        - echo "This should be executed if any step in TASK fails"
    always:
      script:
        - echo "This should always be executed, regardless of job status"

  ## Job description:
  ## - single task on both container and host, host being default
  - name: hybrid_default_host
    type: runSh
    runtime:
      container: false
    steps:
      - IN: trigger_tests
      - TASK:
          name: check_container_OS
          runtime:
            container: true
          script:
            - echo "Checking OS of the container"
            - uname -a
            - cat /etc/*release
      - TASK:
          name: check_host_OS
          script:
            - echo "Checking OS of the host"
            - uname -a
            - cat /etc/*release
    on_success:
      script:
        - echo "Task successfully completed"
    on_failure:
      script:
        - echo "This should be executed if any step in TASK fails"
    always:
      script:
        - echo "This should always be executed, regardless of job status"

  ## Job description:
  ## - single task on both container and host, sharing state
  - name: hybrid_share_task_state
    type: runSh
    runtime:
      container: false
    steps:
      - IN: trigger_tests
      - TASK:
          name: container_write_file
          runtime:
            container: true
          script:
            - echo "write to shared file from a container"
            - uname -a
            - cat /etc/*release
            - echo "Writing data to a file in shared directory"
            - sleep 10
            - echo "CUSTOM_VALUE" > $SHARED_DIR/sharedFile.txt
      - TASK:
          name: host_override_file
          script:
            - echo "Checking OS of the host"
            - uname -a
            - cat /etc/*release
            - echo "Reading data from file in shared directory"
            - cat $SHARED_DIR/sharedFile.txt
            - echo "Overriding file data"
            - sleep 10
            - echo "OVERRIDEN_VALUE" > $SHARED_DIR/sharedFile.txt
      - TASK:
          name: container_check_contents
          runtime:
            container: true
          script:
            - echo "Checking shared file contents"
            - sleep 10
            - cat $SHARED_DIR/sharedFile.txt
    on_success:
      script:
        - echo "Task successfully completed"
    on_failure:
      script:
        - echo "This should be executed if any step in TASK fails"
    always:
      script:
        - echo "This should always be executed, regardless of job status"

  ## Job description:
  ## - run multi-line scripts (success)
  - name: multi_line_script_success
    type: runSh
    steps:
      - IN: trigger_tests
      - TASK:
          name: multi_line_script
          script: |
              echo "Checking OS"
              uname -a
              cat /etc/*release
    on_success:
      script:
        - echo "Task successfully completed"
    on_failure:
      script:
        - echo "This should be executed if any step in TASK fails"
    always:
      script:
        - echo "This should always be executed, regardless of job status"

  ## Job description:
  ## - run single line scripts. The script section will be executed in a single
  ## line
  - name: single_line_script
    type: runSh
    steps:
      - IN: trigger_tests
      - TASK:
          name: single_line_script
          script: >
              echo "Checking OS";
              uname -a;
              cat /etc/*release;
    on_success:
      script:
        - echo "Task successfully completed"
    on_failure:
      script:
        - echo "This should be executed if any step in TASK fails"
    always:
      script:
        - echo "This should always be executed, regardless of job status"

  ## Job description:
  ## - run multi-line scripts (failure)
  - name: multi_line_script_failure
    type: runSh
    steps:
      - IN: trigger_tests
      - TASK:
          name: multi_line_script
          script: |
              echo "Checking OS"
              foo
              uname -a
              cat /etc/*release
    on_success:
      script:
        - echo "Task successfully completed"
    on_failure:
      script:
        - echo "This should be executed if any step in TASK fails"
    always:
      script:
        - echo "This should always be executed, regardless of job status"

  ## Job description:
  ## - exit 0 in on_success (build success)
  - name: exit_0_in_on_success
    type: runSh
    steps:
      - IN: trigger_tests
      - TASK:
          name: success_task
          script:
            - uname -a
            - cat /etc/*release
    on_success:
      script:
        - echo "Task successfully completed"
        - exit 0
        - echo "This will not be executed"
    on_failure:
      script:
        - echo "This should be executed if any step in TASK fails"
    always:
      script:
        - echo "This will not be executed"

  ## Job description:
  ## - exit 1 in on_success (build failure)
  - name: exit_1_in_on_success
    type: runSh
    steps:
      - IN: trigger_tests
      - TASK:
          name: success_task
          script:
            - uname -a
            - cat /etc/*release
    on_success:
      script:
        - echo "Task successfully completed"
        - exit 1
        - echo "This will not be executed"
    on_failure:
      script:
        - echo "This should be executed if any step in TASK fails"
    always:
      script:
        - echo "This will not be executed"

  ## Job description:
  ## - exit 1 in always (build failure)
  - name: exit_1_in_always
    type: runSh
    steps:
      - IN: trigger_tests
      - TASK:
          name: success_task
          script:
            - uname -a
            - cat /etc/*release
    on_success:
      script:
        - echo "Task successfully completed"
    on_failure:
      script:
        - echo "This should be executed if any step in TASK fails"
    always:
      script:
        - exit 1
        - echo "This will not be executed"

  ## Job description:
  ## - exit 0 in on_failure (build failure)
  - name: exit_0_in_on_failure
    type: runSh
    steps:
      - IN: trigger_tests
      - TASK:
          name: failure_task
          script:
            - uname -a
            - foo
            - cat /etc/*release
    on_success:
      script:
        - echo "Task successfully completed"
    on_failure:
      script:
        - echo "This should be executed if any step in TASK fails"
        - exit 0
        - echo "This will not be executed"
    always:
      script:
        - echo "This will not be executed"

  ## Job description:
  ## - resetting ERR trap in a multi-line command will not stop on errors
  ## (build success)
  - name: reset_err_trap_multi_line
    type: runSh
    steps:
      - IN: trigger_tests
      - TASK:
          name: reset_err_trap_multi_line
          script: |
              echo "Checking OS"
              uname -a
              echo "Resetting ERR trap"
              trap "" ERR
              foo
              cat /etc/*release
    on_success:
      script:
        - echo "Task successfully completed"
    on_failure:
      script:
        - echo "This should be executed if any step in TASK fails"
    always:
      script:
        - echo "This should always be executed, regardless of job status"

  ## Job description:
  ## - resetting EXIT trap in a multi-line command and exiting with exit 0, will
  ## result in build failure
  - name: reset_exit_trap_multi_line
    type: runSh
    steps:
      - IN: trigger_tests
      - TASK:
          name: reset_exit_trap_multi_line
          script: |
              echo "Checking OS"
              uname -a
              echo "Resetting EXIT trap"
              trap "" EXIT
              exit 0
              cat /etc/*release
    on_success:
      script:
        - echo "This will not be executed"
    on_failure:
      script:
        - echo "This will not be executed"
    always:
      script:
        - echo "This will not be executed"
